from langchain_ollama import OllamaLLM
from sql_tools import Database
from prompts.llm_prompts import sql_retriever_prompt
from pathlib import Path
import sqlite3
from logger.logger import generate_log
import csv

#####

class Assistant:

    def __init__(self, model: str, temp: int):
        self.model = model
        self.temp = temp
        self.llm = OllamaLLM(model=self.model, temperature=self.temp)

    def get_data(self, path: str, type: str, input: str, filename: str, output_type: str = 'csv') -> bool:
        """
        A method that receive various positional arguments to get data from a database and store it into a file (csv as default)

        Args:
            path (str): the absolute path of the database.
            type (str): the type of database ingested (postgres, sqlite, etc...)
            input (str): the user input to turn into a SQL Query via LLM interaction with LangChain.
            filename (str): the name of the output file.
            output_type (str): the output_type of the file
        
        Returns:
            - bool:
                - 'True' if file was created successfuly.
        """
        #logging.info(f"get_data running...")
        generate_log(1, f"get_data_running...")
        self.database = Database(path, type)
        self.input = input
        self.column_names = self.database.table_columns
        self.output_type = output_type
        self.filename = Path(filename)
        self.data, self.csv_columns = self._retrieve_database(self.input, self.database, self.column_names)

        if self.output_type == 'csv':
            self.dir = Path("./data")
            if self.dir.exists() == True:
                absolute_path = str(str(self.dir)+'/'+str(self.filename)+'.'+self.output_type)
            else:
                self.dir.mkdir(parents=True, exist_ok=True)
            with open(absolute_path, mode='w', newline='', encoding='utf-8',) as file:
                writer = csv.writer(file)
                writer.writerow(self.csv_columns)
                writer.writerows(self.data)
                generate_log(1, f"CSV File ({str(self.filename)}) created at {absolute_path}!")
        else:
            raise TypeError(f"{self.output_type} not supported as output type...")
        return True

    def _generate_query(self, input: str, columns: list) -> str:
        """Generates a SQL query from a user input with a formatted prompt (generated by another function) calling the LLM"""
        self.prompt = sql_retriever_prompt(input, columns)
        generate_log(1, f"Prompt generated, now running...")
        return self.llm.invoke(self.prompt)

    def _retrieve_database(self, input: str, database: Database, columns: list):
        """Retrieves columns and rows from a SQL database connection with SQLite3 and returns the retrieved data and columns from the database"""
        self.query = self._generate_query(input, columns)
        generate_log(1, f"Query: '{self.query}' generated!")
        conn = sqlite3.connect(database.path)
        cursor = conn.cursor()
        execution = cursor.execute(self.query)
        data = execution.fetchall()
        columns = [ name[0] for name in execution.description ]
        generate_log(1, f"Data retrieved from Database {database.path}!")
        conn.close()
        return data, columns # a list of rows and the list of columns

path = "./database/olist.sqlite"
filename = "pootis2"
db_type = "sqlite"
input = "Give me all the information about the order reviews"
assistant = Assistant("Llama3.1", 0.5)
assist_obj = assistant.get_data(path, db_type, input, filename)
print(assist_obj)